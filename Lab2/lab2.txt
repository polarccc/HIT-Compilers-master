UNDEF_VAR = 1,         // 未定义的变量，枚举值从1开始递增，基本要求，
在代码中，变量的使用逻辑主要在 Exp 函数中处理。
当遇到 Exp -> ID 的情况时，会调用 searchTableItem 函数在符号表中查找变量。
如果 searchTableItem 返回 NULL 或者变量是匿名结构体（isStructDef(tp) 为 TRUE），则表示变量未定义。

REDEF_VAR,             // 重复定义的变量，基本要求
在代码中，变量的定义逻辑主要在 VarDec 函数中处理。
在插入符号表之前，会调用 checkTableItemConflict 函数检查是否冲突，这里的冲突查询逻辑就是当接受一个新的变量的时候就去表中查找是否已经有了同名的变量/结构体，如果已经有了就冲突打印
如果冲突，表示变量已被定义。普遍逻辑都是没有冲突加入表中

TYPE_MISMATCH_ASSIGN,  // 赋值类型不匹配，基本要求
在代码中，赋值操作的逻辑主要在 Exp 函数中处理。需要使用checkType方法，检查左边
当遇到 Exp -> Exp ASSIGNOP Exp 的情况时，会检查左右两边的类型是否匹配。
或者是尝试直接非BASIC类型复制

TYPE_MISMATCH_OP,      // 操作数类型不匹配，基本要求
在代码中，运算符的逻辑主要在 Exp 函数中处理。需要使用checkType方法
当遇到二元运算符（如 PLUS、MINUS、STAR 等）时，会检查操作数的类型是否匹配。

NOT_A_ARRAY,           // 非数组类型被当作数组使用，基本要求
在代码中，数组访问的逻辑主要在 Exp 函数中处理。需要使用checkType方法
当遇到 Exp -> Exp LB Exp RB 的情况时，会检查左侧表达式的类型是否为数组。

NOT_A_INT,             // 非整型被当作整型使用，基本要求
在代码中，主要在数组索引和某些运算符的逻辑中检查。需要使用checkType方法
当遇到数组索引 Exp -> Exp LB Exp RB 的情况时，会检查索引是否为整型。

LEFT_VAR_ASSIGN	：赋值号左边出现一个只有右值的表达式